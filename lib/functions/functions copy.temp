// ignore_for_file: invalid_use_of_protected_member, invalid_use_of_visible_for_testing_member

import 'dart:developer';

import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';

import 'package:student/model/students.dart';

ValueNotifier<List<Students>> studentListNotifier = ValueNotifier([]);
late Database _db;

Future<void> initializeDatabase() async {
  _db = await openDatabase('student.db', version: 1, onCreate: (db, version) {
    db.execute('''
      CREATE TABLE $studentsTable (
        ${StudentsFields.id} INTEGER PRIMARY KEY  NOT NULL,
        ${StudentsFields.name} TEXT,
        ${StudentsFields.age} INTEGER NOT NULL,
        ${StudentsFields.email} TEXT,
        ${StudentsFields.domain} TEXT,
        ${StudentsFields.image} TEXT
      )
    ''');
  });
}

Future<void> getAllStudents(Students? student, BuildContext ctx) async {
  studentListNotifier.value.clear();
  try {
    final values = await _db.rawQuery('SELECT * FROM $studentsTable');
    for (var map in values) {
      final student = Students.fromMap(map);
      studentListNotifier.value.add(student);
      studentListNotifier.notifyListeners();
      log("SUcess");
    }
  } catch (e) {
    log("Error getting data : $e");
    showDialog(
      context: ctx,
      builder: (context) => const AlertDialog(
        title: Text("Warning"),
      ),
    );
  }
}

Future<void> addStudent(Students student, BuildContext ctx) async {
  try {
    await _db.rawInsert(
      'INSERT INTO $studentsTable (${StudentsFields.name},${StudentsFields.age},${StudentsFields.email},${StudentsFields.domain},${StudentsFields.image}) VALUES (?, ?, ?, ?, ?)',
      [student.name, student.age, student.email, student.domain, student.image],
    );
    studentListNotifier.value.add(student);

    studentListNotifier.notifyListeners();
  } catch (e) {
    log('Error updating student: $e');
    showDialog(
      context: ctx,
      builder: (context) => const AlertDialog(
        title: Text("Warning"),
      ),
    );
  }
}

Future<void> editStudent(Students student, BuildContext ctx) async {
  try {
    final updatedRows = await _db.rawUpdate(
      'UPDATE $studentsTable SET '
      'WHERE ${StudentsFields.age} = ?, '
      '${StudentsFields.email} = ?, '
      '${StudentsFields.domain} = ? '
      ' ${StudentsFields.name} = ?',
      [
        student.age,
        student.email,
        student.domain,
        student.name,
      ],
    );
    ScaffoldMessenger.of(ctx).showSnackBar(const SnackBar(
      backgroundColor: Colors.green,
      content: Text("Sucesfully Updated"),
      duration: Duration(milliseconds: 600),
    ));
    if (updatedRows > 0) {
      studentListNotifier.notifyListeners();
      log('Success: Student updated');
    } else {
      log('No rows updated.');
    }
  } catch (e) {
    log('Error updating student: $e');
    ScaffoldMessenger.of(ctx).showSnackBar(const SnackBar(
      backgroundColor: Colors.red,
      content: Text("Error occured"),
      duration: Duration(milliseconds: 600),
    ));
  }
}

Future<void> deleteStudent(int id, BuildContext ctx) async {
  try {
    await _db.rawDelete(
      'DELETE FROM $studentsTable WHERE $id = ?',
      [id],
    );

    studentListNotifier.value.removeAt(id);
    studentListNotifier.notifyListeners();
    log('Success: Student deleted');
  } catch (e) {
    log('Error deleting student: $e');
    showDialog(
      context: ctx,
      builder: (context) => const AlertDialog(
        title: Text("Warning"),
      ),
    );
  }
}

Future<void> refreshList(BuildContext ctx) async {
  try {
    final values = await _db.rawQuery('SELECT * FROM $studentsTable');

    studentListNotifier.value =
        values.map((map) => Students.fromMap(map)).toList();
    studentListNotifier.notifyListeners();
  } catch (e) {
    log("Error refreshing data");
    showDialog(
      context: ctx,
      builder: (context) => const AlertDialog(
        title: Text("Warning"),
      ),
    );
  }
}